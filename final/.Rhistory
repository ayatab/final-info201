scale_fill_gradient2(low ="blue", mid = "white", high = "red", midpoint = 1) +
coord_quickmap()
# print(map_WA)
setwd("C:/Users/justi/Desktop/INFO201/plot-jtham-2028513")
#!/usr/bin/env Rscript
###
### analysis.R
###
### This is the file where you can do your code for
### analysis and images
## Set up
library(tidyverse)
library(maps)
## Load data, takes a minute
## But note: you have to download the data first, and adjust
## the path here for your computer!
data <- read.csv("incarceration_trends.csv")
## Compute values of interest (at least 5)
# County with largest prison population overall
largest_county <- data %>%
select(state, county_name, year, total_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(total_prison_pop)) %>%
filter(total_prison_pop %in% max(total_prison_pop)) %>%
arrange(-total_prison_pop) %>%
head(1)
# print(largest_county)
# County with biggest difference in male vs female incarcerated population
biggest_difference <- data %>%
select(state, county_name, year, female_prison_pop, male_prison_pop) %>%
mutate(difference = male_prison_pop - female_prison_pop) %>%
group_by(county_name) %>%
filter(difference %in% max(difference)) %>%
arrange(-difference) %>%
head(1)
# print(biggest_difference)
# County with highest AAPI prison pop
highest_aapi <- data %>%
select(county_name, state, year, aapi_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(aapi_prison_pop)) %>%
filter(aapi_prison_pop %in% max(aapi_prison_pop)) %>%
arrange(-aapi_prison_pop) %>%
head(1)
# print(highest_aapi)
# County with highest all time total female prison population
highest_female_population <- data %>%
select(state, county_name, female_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(female_prison_pop)) %>%
filter(female_prison_pop %in% max(female_prison_pop))%>%
arrange(-female_prison_pop) %>%
head(1)
# print(highest_female_population)
# County with highest total incarcerated population in 2018
highest_2018 <- data %>%
select(county_name, state, year, total_prison_pop) %>%
filter(year == 2018) %>%
filter(total_prison_pop %in% max(total_prison_pop)) %>%
arrange(-total_prison_pop) %>%
head(1)
# print(highest_2018)
## ---------- Example plot ----------
## You don't need this plot for your final analysis!
## prepare data:
exampleData <- data %>%
group_by(year) %>%
summarize(prisoners = sum(total_jail_pop, na.rm=TRUE))
## create plot
examplePlot <- ggplot(exampleData, aes(year, prisoners)) +
geom_line() +
labs(y = "Total number of prisoners")
# print(examplePlot)
## ---------- trend over time ----------
## compute the WA trend over time here
## you may select a relevant subset of data like here:
timeData <- data %>%
select(black_prison_pop, black_pop_15to64, year, fips, county_name, state) %>%
filter(state == "WA")
## Filter to 10 counties with largest ever
## black incarcerated population
## your code here...
top_10 <- timeData %>%
select(county_name, year, black_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(black_prison_pop)) %>%
filter(black_prison_pop %in% max(black_prison_pop)) %>%
arrange(-black_prison_pop) %>%
head(10)
# print(top_10)
## Make a nice time series plot here...
pop_time <- timeData %>%
select(county_name, black_prison_pop, year) %>%
filter(!is.na(black_prison_pop), county_name %in% top_10$county_name)
pop_time_plot <- ggplot(pop_time) +
geom_line(mapping = aes(x = year, y = black_prison_pop, color = county_name)) +
labs(x = "Year", y = "Black Prison Population")
# print(pop_time_plot)
## ---------- comparing blacks/whites ----------
## compute black/white incarceration rates
## ...
black_white_rates <- data %>%
select(county_name, fips, state, year, white_prison_pop, white_pop_15to64, black_prison_pop, black_pop_15to64) %>%
mutate(white_rate = white_prison_pop / white_pop_15to64, black_rate = black_prison_pop / black_pop_15to64, black_versus_white = black_rate / white_rate) %>%
filter(state == "WA", !is.na(white_prison_pop), !is.na(black_prison_pop), !is.na(white_pop_15to64), !is.na(black_pop_15to64))
# print(black_white_rates)
## Make a nice plot of these figures
black_white_plot <- ggplot(black_white_rates) +
geom_point(mapping = aes(x = white_rate, y = black_rate)) +
geom_abline(slope = 1, intercept = 0) +
labs(title = "Black vs. White Incarceration Rates in Washington Counties", x = "White Incarceration Rate", y = "Black Incarceration Rate")
# print(black_white_plot)
## find the most extreme counties:
most_extreme <- black_white_rates %>%
arrange(-black_versus_white) %>%
head(1)
# print(most_extreme)
# Skagit countyin 1991 has the most extreme black versus white incarceration rate with 23.5
## ---------- maps----------
## load the county shapefile and join on county fips
county_shapes <- map_data("county") %>%
# load county boundary data (package "maps")
unite(polyname, region, subregion, sep = ",") %>%
# put the polygon name in the same form as in county.fips
left_join(county.fips, by = "polyname")
# merge with fips data
## now you have dataset `county_shapes` that contains the boudaries
## and the corresponding fipts codes.  You can directly merge it with
## the incarceration data using fips codes.
## select year 2016
data_2016 <- black_white_rates  %>%
select(year, county_name, fips, state, black_versus_white) %>%
group_by(county_name) %>%
filter(year == "2016")
# print(data_2016)
## Join map data to the data
joined_data <- left_join(data_2016, county_shapes, by = "fips")
## Make a nice map
## use "+ coord_quickmap()" to make the map look not distorted
map_WA <- ggplot(joined_data, aes(x = long, y = lat)) +
geom_polygon(aes(fill = black_versus_white), color = "black") +
scale_fill_gradient2(low ="blue", mid = "white", high = "red", midpoint = 1) +
coord_quickmap()
# print(map_WA)
joined_data <- left_join(data_2016, county_shapes, by = "fips")
View(map_WA)
print(map_WA)
setwd("C:/Users/justi/Desktop/INFO201/final-info201/final")
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(maps)
library(tidyverse)
country_vaccinations <- read.csv("../data/country_vaccinations.csv")
country_by_manufacturer <- read.csv("../data/country_vaccinations_by_manufacturer.csv")
county_statistics <- read.csv("../data/county_statistics.csv")
trump_biden <- read.csv("../data/trump_biden_polls.csv")
trump_clinton <- read.csv("../data/trump_clinton_polls.csv")
vaccine_hesitancy <- read.csv("../data/Vaccine_Hesitancy_County.csv")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
## load the county shapefile and join on county fips
county_shapes <- map_data("county") %>%
# load county boundary data (package "maps")
unite(polyname, region, subregion, sep = ",") %>%
# put the polygon name in the same form as in county.fips
left_join(county.fips, by = "polyname")
# merge with fips data
map_hesitancy <- left_join(vaccine_hesitancy, county_shapes, by = c("FIPS.Code" = "fips"))
output$mapPlot <- renderPlot({
map <- ggplot(map_hesitancy, aes(x = long, y = lat)) +
geom_polygon(aes(fill = Percent.Hispanic), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0.5) +
coord_quickmap()
})
})
map <- ggplot(map_hesitancy, aes(x = long, y = lat)) +
geom_polygon(aes(fill = Percent.Hispanic), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0.5) +
coord_quickmap()
map_hesitancy <- left_join(vaccine_hesitancy, county_shapes, by = c("FIPS.Code" = "fips"))
output$mapPlot <- renderPlot({
county_shapes <- map_data("county") %>%
# load county boundary data (package "maps")
unite(polyname, region, subregion, sep = ",") %>%
# put the polygon name in the same form as in county.fips
left_join(county.fips, by = "polyname")
# merge with fips data
map_hesitancy <- left_join(vaccine_hesitancy, county_shapes, by = c("FIPS.Code" = "fips"))
output$mapPlot <- renderPlot({
map <- ggplot(map_hesitancy, aes(x = long, y = lat)) +
geom_polygon(aes(fill = Percent.Hispanic), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0.5) +
coord_quickmap()
})
print(output$mapPlot)
print(output$mapPlot)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(maps)
library(tidyverse)
#
library(shiny)
library(shinythemes)
runApp()
runApp()
runApp()
trump_clinton <- read.csv("../data/trump_clinton_polls.csv")
vaccine_hesitancy <- read.csv("../data/Vaccine_Hesitancy_County.csv")
vaccine_hesitancy_state <-read.csv("../data/Data_with_state_vaccine.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
library(tidyverse)
library(tidyr)
vaccine_hesitancy_state <-read.csv("../data/Data_with_state_vaccine.csv")
View(vaccine_hesitancy_state)
plot_scatter <- ggplot(vaccine_hesitancy_state) +
geom_point(mapping = aes(
x = vaccinehesitancy,
y = povertyrate_2019, col = "orange")
)
plot_scatter
##########
tabPanel('Hesitancy Comparisons',
sidebarLayout(
sidebarPanel(
selectInput("select", h3("Select data to compare"),
choices = list("trumpvote_2020",
"povertyrate",
"trumpvote_2016",
"incomepercapita_2018",
"unemployment_Apr2021"),
selected = 1)
),
mainPanel(
plotOutput("plot_scatter")
),
),
),
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(maps)
library(tidyverse)
country_vaccinations <- read.csv("../data/country_vaccinations.csv")
country_by_manufacturer <- read.csv("../data/country_vaccinations_by_manufacturer.csv")
county_statistics <- read.csv("../data/county_statistics.csv")
trump_biden <- read.csv("../data/trump_biden_polls.csv")
trump_clinton <- read.csv("../data/trump_clinton_polls.csv")
vaccine_hesitancy <- read.csv("../data/Vaccine_Hesitancy_County.csv")
vaccine_hesitancy_state <-read.csv("../data/Data_with_state_vaccine.csv")
Comparison_data <- country_vaccinations %>%
filter(country == "United States" | country == "Canada") %>%
filter(date >= as.Date("2021-01-01")) %>%
filter(!is.na(people_vaccinated_per_hundred))
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
## load the county shapefile and join on county fips
county_shapes <- map_data("county") %>%
# load county boundary data (package "maps")
unite(polyname, region, subregion, sep = ",") %>%
# put the polygon name in the same form as in county.fips
left_join(county.fips, by = "polyname")
# merge with fips data
# combine county shapes with vaccine hesitancy data
map_hesitancy <- left_join(vaccine_hesitancy, county_shapes, by = c("FIPS.Code" = "fips"))
output$mapPlot <- renderPlot({
if (input$mapFilter == "Estimated % Hesitant") {
# Map displayed if user selects Estimated % Hesitant and appropriate labels/scale
ggplot(map_hesitancy, aes(x = long, y = lat)) +
geom_polygon(aes(group = group, fill = Estimated.hesitant), color = "black") +
scale_fill_gradient(low = "white", high = "red", breaks = c(0,0.5) ,limits=c(0, 0.5), labs(scale = "% of Population")) +
labs(title = "Estimated % Hesitant") +
coord_quickmap()
} else if (input$mapFilter == "Estimated % Strongly Hesitant") {
# Map displayed if user selects Estimated % Strongly Hesitant and appropriate labels/scale
ggplot(map_hesitancy, aes(x = long, y = lat)) +
geom_polygon(aes(group = group, fill = Estimated.strongly.hesitant), color = "black") +
scale_fill_gradient(low = "white", high = "red", breaks = c(0,0.5) ,limits=c(0, 0.5), labs(scale = "% of Population")) +
labs(title = "Estimated % Strongly Hesitant") +
coord_quickmap()
} else if (input$mapFilter == "Estimated % Hesitant or Unsure") {
# Map displayed if user selects Estimated % Hesitant or Unsure and appropriate labels/scale
ggplot(map_hesitancy, aes(x = long, y = lat)) +
geom_polygon(aes(group = group, fill = Estimated.hesitant.or.unsure), color = "black") +
scale_fill_gradient(low = "white", high = "red", breaks = c(0,0.5) ,limits=c(0, 0.5), labs(scale = "% of Population")) +
labs(title = "Estimated % Hesitant or Unsure") +
coord_quickmap()
} else if (input$mapFilter == "% Fully Vaccinated") {
# Map displayed if user selects % Fully Vaccinated and appropriate labels/scale
ggplot(map_hesitancy, aes(x = long, y = lat)) +
geom_polygon(aes(group = group, fill = Percent.adults.fully.vaccinated.against.COVID.19), color = "black") +
scale_fill_gradient(low = "white", high = "blue", breaks = c(0,0.5,1) ,limits=c(0, 1), labs(scale = "% of Population")) +
labs(title = "Estimated % Fully Vaccinated") +
coord_quickmap()
}
})
## To filter by date in UI
filterByDate_US <- reactive({
Comparison_data %>%
filter(date %in% input$date) %>%
group_by(date)
})
output$distPlot <- renderPlot({
## Labels for plot
ggplot(filterByDate_US()) +
geom_histogram(stat = "identity", mapping = aes(x = iso_code, y = people_vaccinated_per_hundred, fill = iso_code)) +
labs(title = "Vaccination Rates (Canada vs. U.S)", x = input$date, y = "# Vaccinated (per 100)")
})
output$scatter_plot <- renderPlot({
if (input$select == "% Voted Trump (2020)") {
ggplot(vaccine_hesitancy_state) +
geom_point(mapping = aes(
x = vaccinehesitancy,
y = trumpvote_2020, col = "orange")
)
} else if (input$select == "Poverty Rate (2019)") {
ggplot(vaccine_hesitancy_state) +
geom_point(mapping = aes(
x = vaccinehesitancy,
y = povertyrate_2019, col = "orange")
)
} else if (input$select == "Income per Capita (2018)") {
ggplot(vaccine_hesitancy_state) +
geom_point(mapping = aes(
x = vaccinehesitancy,
y = incomepercapita_2018, col = "orange")
)
} else if (input$select == "Unemployment Rate (Apr2021)") {
ggplot(vaccine_hesitancy_state) +
geom_point(mapping = aes(
x = vaccinehesitancy,
y = unemployment_Apr2021, col = "orange"))
} else if (input$select == "% Voted Trump (2016)") {
ggplot(vaccine_hesitancy_state) +
geom_point(mapping = aes(
x = vaccinehesitancy,
y = trumpvote_2016, col = "orange"))
}
})
})
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(shinythemes)
country_vaccinations <- read.csv("../data/country_vaccinations.csv")
country_by_manufacturer <- read.csv("../data/country_vaccinations_by_manufacturer.csv")
county_statistics <- read.csv("../data/county_statistics.csv")
trump_biden <- read.csv("../data/trump_biden_polls.csv")
trump_clinton <- read.csv("../data/trump_clinton_polls.csv")
vaccine_hesitancy <- read.csv("../data/Vaccine_Hesitancy_County.csv")
vaccine_hesitancy_state <-read.csv("../data/Data_with_state_vaccine.csv")
Comparison_data <- country_vaccinations %>%
filter(country == "United States" | country == "Canada") %>%
filter(date >= as.Date("2021-01-01")) %>%
filter(!is.na(people_vaccinated_per_hundred))
# Define UI for application that draws a histogram
shinyUI(fluidPage(theme = shinytheme('united'),
# Application title
titlePanel(h1('US COVID-19 Vaccine and Household Incomes', align = 'center', style = 'color: #Ffa07f')),
navbarPage(':)',
tabPanel(icon('home'),
fluidRow(
column(12,
tags$img(src = 'https://im-media.voltron.voanews.com/Drupal/01live-166/styles/892x501/s3/2020-12/2020-12-08T180646Z_2053809307_RC26JK9ZHZ6T_RTRMADP_3_HEALTH-CORONAVIRUS-VACCINE-PATCHWORK.JPG?itok=HJMB02uJ', width = "500px", height = "300px", style = "padding: 10px; display: block; margin-left: auto; margin-right: auto; border-radius: 10%")
),
column(12,
p("Hello, and welcome to our INFO 201 Final Project.",
style = "color: #Af3a10; font-family: Calibri; font-size: 30px; height: 100px; background-color: #Ffa07f; text-align: center; padding: 30px; border-radius: 20px")
),
column(12,
p("With the pandemic control progress rising via the vaccines being distributed throughout the United States and in the world,
our group wanted to highlight some issues that still persist regarding people's behavior around vaccines, related to household income.
We retrieved our data of the vaccine hesitancy from the CDC and the household income and poverty in the US from the US Census.",
style = "color: #Af3a10; font-family: Calibri; font-size: 15px; height: 110px; background-color: #Ffa07f; text-align: center; padding: 17px; border-radius: 20px"))
),
column(6,
p("We worked on a few elements regarding vaccine rates, hesitancy, and hesitancy by political and economical factors. Our tabs focus on these elements ----> ",
style = "color: #Af3a10; font-family: Calibri; font-size: 20px; height: 150px; background-color: #Ffa07f; text-align: center; padding: 20px; border-radius: 20px"),
),
column(6,
tags$ol(
tags$li("Vaccine Rates by date, by Mitchell Stapelman"),
tags$li("Map with vaccine hesitancy by state, by Justin Tham"),
tags$li("Graph of vaccine hesitancy compared with political and economical factors, by Lisa Benjamin"),
style = "color: #691d03; font-family: Calibri; font-size: 20px; height: 250px; background-color: #Ef6332; text-align: center; padding: 25px; border-radius: 20px"))
),
tabPanel('Vaccine Rates',
p("This page displays the number of people that have been vaccinated per hundred, filtered by date.",
style = "color: #Af3a10; font-family: Calibri; font-size: 20px; height: 50px; background-color: #Ffa07f; text-align: center; padding: 10px; border-radius: 20px"),
sidebarPanel(
selectInput("date", "Choose a date:", sort(Comparison_data$date))
),
mainPanel(
plotOutput("distPlot")
),
),
tabPanel('Hesitancy Map',
p("This page displays the percent of estimated people hesitant on receiving the COVID vaccine in the US, with the darker regions
showing where there are higher populations of estimated hesitant people. The last selection shows the percent of fully vaccinated people
in the US, displayed in a different color scheme than the rest.",
style = "color: #Af3a10; font-family: Calibri; font-size: 20px; height: 150px; background-color: #Ffa07f; text-align: center; padding: 20px; border-radius: 20px"),
sidebarPanel(
selectInput("mapFilter", "Display by:", c("Estimated % Hesitant or Unsure", "Estimated % Hesitant", "Estimated % Strongly Hesitant", "% Fully Vaccinated"), selected = "Estimated % Hesitant or Unsure")
),
mainPanel(
plotOutput("mapPlot")
),
),
tabPanel('Hesitancy Comparisons',
p("This page displays... (change box size with height, change the spacing from the top with padding",
style = "color: #Af3a10; font-family: Calibri; font-size: 20px; height: 50px; background-color: #Ffa07f; text-align: center; padding: 10px; border-radius: 20px"),
sidebarPanel(
selectInput("select", h3("Select data to compare"),
choices = list("Income per Capita (2018)",
"% Voted Trump (2016)",
"% Voted Trump (2020)",
"Poverty Rate (2019)",
"Unemployment Rate (Apr2021)"
),
selected = 1)
),
mainPanel(
plotOutput("scatter_plot")
),
),
tabPanel('Conclusion Page',
column(6,
p("Description of notable insight or pattern discovered in data stuff::::: Through our dataset ",
style = "color: #Af3a10; font-family: Calibri; font-size: 20px; height: 150px; background-color: #Ffa07f; text-align: center; padding: 20px; border-radius: 20px"),
),
column(6,
p("Specific piece of data, table, or chart that demonstrates pattern or insight",
style = "color: #Af3a10; font-family: Calibri; font-size: 20px; height: 150px; background-color: #Ffa07f; text-align: center; padding: 20px; border-radius: 20px"),
),
column(6,
p("Broader implications of the insight",
style = "color: #Af3a10; font-family: Calibri; font-size: 20px; height: 150px; background-color: #Ffa07f; text-align: center; padding: 20px; border-radius: 20px"),
),
column(6,
p("Our dataset takes data from the CDC and the US Census that gives unbiased responses. Our dataset with the vaccine hesitancy
rates also had data that was split from economical regions and by ethnicity as well, but we did not use that data to bring
any bias into our data visualizations. We can see how the specified columns present in the vaccine hesitancy dataset can potentially
harm certain ethnic groups if used in the wrong way to target certain groups. We avoided classifying by ethnicity to display any extreme
rates or numbers.",
style = "color: #Af3a10; font-family: Calibri; font-size: 20px; height: 400px; background-color: #Ffa07f; text-align: center; padding: 15px; border-radius: 20px"),
),
column(6,
p("Future ideas to advance the project:::Some ideas that could be implemented to advance our project would include ways to analyze how race and state statistics like
COVID-19 deaths or mask mandates. Having more data on these aspects would make it easier to understand vaccine hesitancy rates and what is driving the current vaccination efforts in the U.S.",
style = "color: #Af3a10; font-family: Calibri; font-size: 20px; height: 400px; background-color: #Ffa07f; text-align: center; padding: 15px; border-radius: 20px"),
)
)
)
# Sidebar with a slider input for number of bins
# sidebarLayout(
#     sidebarPanel(
#         sliderInput("bins",
#                     "Number of bins:",
#                     min = 1,
#                     max = 50,
#                     value = 30)
#     ),
#
#     # Show a plot of the generated distribution
#     mainPanel(
#         plotOutput("distPlot")
#     )
# )
))
