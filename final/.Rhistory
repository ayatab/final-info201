shinyServer(function(input, output) {
## load the county shapefile and join on county fips
county_shapes <- map_data("county") %>%
# load county boundary data (package "maps")
unite(polyname, region, subregion, sep = ",") %>%
# put the polygon name in the same form as in county.fips
left_join(county.fips, by = "polyname")
# merge with fips data
map_hesitancy <- left_join(vaccine_hesitancy, county_shapes, by = c("FIPS.Code" = "fips"))
output$mapPlot <- renderPlot({
# draw the histogram with the specified number of bins
ggplot(map_hesitancy, aes(x = long, y = lat)) +
geom_polygon(aes(fill = Estimated.hesitant), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0.5) +
coord_quickmap()
})
})
print(map)
map <- ggplot(map_hesitancy, aes(x = long, y = lat)) +
geom_polygon(aes(fill = Percent.Hispanic), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0.5) +
coord_quickmap()
View(map)
View(map)
#!/usr/bin/env Rscript
###
### analysis.R
###
### This is the file where you can do your code for
### analysis and images
## Set up
library(tidyverse)
library(maps)
## Load data, takes a minute
## But note: you have to download the data first, and adjust
## the path here for your computer!
data <- read.csv("incarceration_trends.csv")
## Compute values of interest (at least 5)
# County with largest prison population overall
largest_county <- data %>%
select(state, county_name, year, total_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(total_prison_pop)) %>%
filter(total_prison_pop %in% max(total_prison_pop)) %>%
arrange(-total_prison_pop) %>%
head(1)
# print(largest_county)
# County with biggest difference in male vs female incarcerated population
biggest_difference <- data %>%
select(state, county_name, year, female_prison_pop, male_prison_pop) %>%
mutate(difference = male_prison_pop - female_prison_pop) %>%
group_by(county_name) %>%
filter(difference %in% max(difference)) %>%
arrange(-difference) %>%
head(1)
# print(biggest_difference)
# County with highest AAPI prison pop
highest_aapi <- data %>%
select(county_name, state, year, aapi_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(aapi_prison_pop)) %>%
filter(aapi_prison_pop %in% max(aapi_prison_pop)) %>%
arrange(-aapi_prison_pop) %>%
head(1)
# print(highest_aapi)
# County with highest all time total female prison population
highest_female_population <- data %>%
select(state, county_name, female_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(female_prison_pop)) %>%
filter(female_prison_pop %in% max(female_prison_pop))%>%
arrange(-female_prison_pop) %>%
head(1)
# print(highest_female_population)
# County with highest total incarcerated population in 2018
highest_2018 <- data %>%
select(county_name, state, year, total_prison_pop) %>%
filter(year == 2018) %>%
filter(total_prison_pop %in% max(total_prison_pop)) %>%
arrange(-total_prison_pop) %>%
head(1)
# print(highest_2018)
## ---------- Example plot ----------
## You don't need this plot for your final analysis!
## prepare data:
exampleData <- data %>%
group_by(year) %>%
summarize(prisoners = sum(total_jail_pop, na.rm=TRUE))
## create plot
examplePlot <- ggplot(exampleData, aes(year, prisoners)) +
geom_line() +
labs(y = "Total number of prisoners")
# print(examplePlot)
## ---------- trend over time ----------
## compute the WA trend over time here
## you may select a relevant subset of data like here:
timeData <- data %>%
select(black_prison_pop, black_pop_15to64, year, fips, county_name, state) %>%
filter(state == "WA")
## Filter to 10 counties with largest ever
## black incarcerated population
## your code here...
top_10 <- timeData %>%
select(county_name, year, black_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(black_prison_pop)) %>%
filter(black_prison_pop %in% max(black_prison_pop)) %>%
arrange(-black_prison_pop) %>%
head(10)
# print(top_10)
## Make a nice time series plot here...
pop_time <- timeData %>%
select(county_name, black_prison_pop, year) %>%
filter(!is.na(black_prison_pop), county_name %in% top_10$county_name)
pop_time_plot <- ggplot(pop_time) +
geom_line(mapping = aes(x = year, y = black_prison_pop, color = county_name)) +
labs(x = "Year", y = "Black Prison Population")
# print(pop_time_plot)
## ---------- comparing blacks/whites ----------
## compute black/white incarceration rates
## ...
black_white_rates <- data %>%
select(county_name, fips, state, year, white_prison_pop, white_pop_15to64, black_prison_pop, black_pop_15to64) %>%
mutate(white_rate = white_prison_pop / white_pop_15to64, black_rate = black_prison_pop / black_pop_15to64, black_versus_white = black_rate / white_rate) %>%
filter(state == "WA", !is.na(white_prison_pop), !is.na(black_prison_pop), !is.na(white_pop_15to64), !is.na(black_pop_15to64))
# print(black_white_rates)
## Make a nice plot of these figures
black_white_plot <- ggplot(black_white_rates) +
geom_point(mapping = aes(x = white_rate, y = black_rate)) +
geom_abline(slope = 1, intercept = 0) +
labs(title = "Black vs. White Incarceration Rates in Washington Counties", x = "White Incarceration Rate", y = "Black Incarceration Rate")
# print(black_white_plot)
## find the most extreme counties:
most_extreme <- black_white_rates %>%
arrange(-black_versus_white) %>%
head(1)
# print(most_extreme)
# Skagit countyin 1991 has the most extreme black versus white incarceration rate with 23.5
## ---------- maps----------
## load the county shapefile and join on county fips
county_shapes <- map_data("county") %>%
# load county boundary data (package "maps")
unite(polyname, region, subregion, sep = ",") %>%
# put the polygon name in the same form as in county.fips
left_join(county.fips, by = "polyname")
# merge with fips data
## now you have dataset `county_shapes` that contains the boudaries
## and the corresponding fipts codes.  You can directly merge it with
## the incarceration data using fips codes.
## select year 2016
data_2016 <- black_white_rates  %>%
select(year, county_name, fips, state, black_versus_white) %>%
group_by(county_name) %>%
filter(year == "2016")
# print(data_2016)
## Join map data to the data
joined_data <- left_join(data_2016, county_shapes, by = "fips")
## Make a nice map
## use "+ coord_quickmap()" to make the map look not distorted
map_WA <- ggplot(joined_data, aes(x = long, y = lat)) +
geom_polygon(aes(fill = black_versus_white), color = "black") +
scale_fill_gradient2(low ="blue", mid = "white", high = "red", midpoint = 1) +
coord_quickmap()
# print(map_WA)
map_WA <- ggplot(joined_data, aes(x = long, y = lat)) +
geom_polygon(aes(fill = black_versus_white), color = "black") +
scale_fill_gradient2(low ="blue", mid = "white", high = "red", midpoint = 1) +
coord_quickmap()
#!/usr/bin/env Rscript
###
### analysis.R
###
### This is the file where you can do your code for
### analysis and images
## Set up
library(tidyverse)
library(maps)
## Load data, takes a minute
## But note: you have to download the data first, and adjust
## the path here for your computer!
data <- read.csv("incarceration_trends.csv")
## Compute values of interest (at least 5)
# County with largest prison population overall
largest_county <- data %>%
select(state, county_name, year, total_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(total_prison_pop)) %>%
filter(total_prison_pop %in% max(total_prison_pop)) %>%
arrange(-total_prison_pop) %>%
head(1)
# print(largest_county)
# County with biggest difference in male vs female incarcerated population
biggest_difference <- data %>%
select(state, county_name, year, female_prison_pop, male_prison_pop) %>%
mutate(difference = male_prison_pop - female_prison_pop) %>%
group_by(county_name) %>%
filter(difference %in% max(difference)) %>%
arrange(-difference) %>%
head(1)
# print(biggest_difference)
# County with highest AAPI prison pop
highest_aapi <- data %>%
select(county_name, state, year, aapi_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(aapi_prison_pop)) %>%
filter(aapi_prison_pop %in% max(aapi_prison_pop)) %>%
arrange(-aapi_prison_pop) %>%
head(1)
# print(highest_aapi)
# County with highest all time total female prison population
highest_female_population <- data %>%
select(state, county_name, female_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(female_prison_pop)) %>%
filter(female_prison_pop %in% max(female_prison_pop))%>%
arrange(-female_prison_pop) %>%
head(1)
# print(highest_female_population)
# County with highest total incarcerated population in 2018
highest_2018 <- data %>%
select(county_name, state, year, total_prison_pop) %>%
filter(year == 2018) %>%
filter(total_prison_pop %in% max(total_prison_pop)) %>%
arrange(-total_prison_pop) %>%
head(1)
# print(highest_2018)
## ---------- Example plot ----------
## You don't need this plot for your final analysis!
## prepare data:
exampleData <- data %>%
group_by(year) %>%
summarize(prisoners = sum(total_jail_pop, na.rm=TRUE))
## create plot
examplePlot <- ggplot(exampleData, aes(year, prisoners)) +
geom_line() +
labs(y = "Total number of prisoners")
# print(examplePlot)
## ---------- trend over time ----------
## compute the WA trend over time here
## you may select a relevant subset of data like here:
timeData <- data %>%
select(black_prison_pop, black_pop_15to64, year, fips, county_name, state) %>%
filter(state == "WA")
## Filter to 10 counties with largest ever
## black incarcerated population
## your code here...
top_10 <- timeData %>%
select(county_name, year, black_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(black_prison_pop)) %>%
filter(black_prison_pop %in% max(black_prison_pop)) %>%
arrange(-black_prison_pop) %>%
head(10)
# print(top_10)
## Make a nice time series plot here...
pop_time <- timeData %>%
select(county_name, black_prison_pop, year) %>%
filter(!is.na(black_prison_pop), county_name %in% top_10$county_name)
pop_time_plot <- ggplot(pop_time) +
geom_line(mapping = aes(x = year, y = black_prison_pop, color = county_name)) +
labs(x = "Year", y = "Black Prison Population")
# print(pop_time_plot)
## ---------- comparing blacks/whites ----------
## compute black/white incarceration rates
## ...
black_white_rates <- data %>%
select(county_name, fips, state, year, white_prison_pop, white_pop_15to64, black_prison_pop, black_pop_15to64) %>%
mutate(white_rate = white_prison_pop / white_pop_15to64, black_rate = black_prison_pop / black_pop_15to64, black_versus_white = black_rate / white_rate) %>%
filter(state == "WA", !is.na(white_prison_pop), !is.na(black_prison_pop), !is.na(white_pop_15to64), !is.na(black_pop_15to64))
# print(black_white_rates)
## Make a nice plot of these figures
black_white_plot <- ggplot(black_white_rates) +
geom_point(mapping = aes(x = white_rate, y = black_rate)) +
geom_abline(slope = 1, intercept = 0) +
labs(title = "Black vs. White Incarceration Rates in Washington Counties", x = "White Incarceration Rate", y = "Black Incarceration Rate")
# print(black_white_plot)
## find the most extreme counties:
most_extreme <- black_white_rates %>%
arrange(-black_versus_white) %>%
head(1)
# print(most_extreme)
# Skagit countyin 1991 has the most extreme black versus white incarceration rate with 23.5
## ---------- maps----------
## load the county shapefile and join on county fips
county_shapes <- map_data("county") %>%
# load county boundary data (package "maps")
unite(polyname, region, subregion, sep = ",") %>%
# put the polygon name in the same form as in county.fips
left_join(county.fips, by = "polyname")
# merge with fips data
## now you have dataset `county_shapes` that contains the boudaries
## and the corresponding fipts codes.  You can directly merge it with
## the incarceration data using fips codes.
## select year 2016
data_2016 <- black_white_rates  %>%
select(year, county_name, fips, state, black_versus_white) %>%
group_by(county_name) %>%
filter(year == "2016")
# print(data_2016)
## Join map data to the data
joined_data <- left_join(data_2016, county_shapes, by = "fips")
## Make a nice map
## use "+ coord_quickmap()" to make the map look not distorted
map_WA <- ggplot(joined_data, aes(x = long, y = lat)) +
geom_polygon(aes(fill = black_versus_white), color = "black") +
scale_fill_gradient2(low ="blue", mid = "white", high = "red", midpoint = 1) +
coord_quickmap()
# print(map_WA)
setwd("C:/Users/justi/Desktop/INFO201/plot-jtham-2028513")
#!/usr/bin/env Rscript
###
### analysis.R
###
### This is the file where you can do your code for
### analysis and images
## Set up
library(tidyverse)
library(maps)
## Load data, takes a minute
## But note: you have to download the data first, and adjust
## the path here for your computer!
data <- read.csv("incarceration_trends.csv")
## Compute values of interest (at least 5)
# County with largest prison population overall
largest_county <- data %>%
select(state, county_name, year, total_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(total_prison_pop)) %>%
filter(total_prison_pop %in% max(total_prison_pop)) %>%
arrange(-total_prison_pop) %>%
head(1)
# print(largest_county)
# County with biggest difference in male vs female incarcerated population
biggest_difference <- data %>%
select(state, county_name, year, female_prison_pop, male_prison_pop) %>%
mutate(difference = male_prison_pop - female_prison_pop) %>%
group_by(county_name) %>%
filter(difference %in% max(difference)) %>%
arrange(-difference) %>%
head(1)
# print(biggest_difference)
# County with highest AAPI prison pop
highest_aapi <- data %>%
select(county_name, state, year, aapi_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(aapi_prison_pop)) %>%
filter(aapi_prison_pop %in% max(aapi_prison_pop)) %>%
arrange(-aapi_prison_pop) %>%
head(1)
# print(highest_aapi)
# County with highest all time total female prison population
highest_female_population <- data %>%
select(state, county_name, female_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(female_prison_pop)) %>%
filter(female_prison_pop %in% max(female_prison_pop))%>%
arrange(-female_prison_pop) %>%
head(1)
# print(highest_female_population)
# County with highest total incarcerated population in 2018
highest_2018 <- data %>%
select(county_name, state, year, total_prison_pop) %>%
filter(year == 2018) %>%
filter(total_prison_pop %in% max(total_prison_pop)) %>%
arrange(-total_prison_pop) %>%
head(1)
# print(highest_2018)
## ---------- Example plot ----------
## You don't need this plot for your final analysis!
## prepare data:
exampleData <- data %>%
group_by(year) %>%
summarize(prisoners = sum(total_jail_pop, na.rm=TRUE))
## create plot
examplePlot <- ggplot(exampleData, aes(year, prisoners)) +
geom_line() +
labs(y = "Total number of prisoners")
# print(examplePlot)
## ---------- trend over time ----------
## compute the WA trend over time here
## you may select a relevant subset of data like here:
timeData <- data %>%
select(black_prison_pop, black_pop_15to64, year, fips, county_name, state) %>%
filter(state == "WA")
## Filter to 10 counties with largest ever
## black incarcerated population
## your code here...
top_10 <- timeData %>%
select(county_name, year, black_prison_pop) %>%
group_by(county_name) %>%
filter(!is.na(black_prison_pop)) %>%
filter(black_prison_pop %in% max(black_prison_pop)) %>%
arrange(-black_prison_pop) %>%
head(10)
# print(top_10)
## Make a nice time series plot here...
pop_time <- timeData %>%
select(county_name, black_prison_pop, year) %>%
filter(!is.na(black_prison_pop), county_name %in% top_10$county_name)
pop_time_plot <- ggplot(pop_time) +
geom_line(mapping = aes(x = year, y = black_prison_pop, color = county_name)) +
labs(x = "Year", y = "Black Prison Population")
# print(pop_time_plot)
## ---------- comparing blacks/whites ----------
## compute black/white incarceration rates
## ...
black_white_rates <- data %>%
select(county_name, fips, state, year, white_prison_pop, white_pop_15to64, black_prison_pop, black_pop_15to64) %>%
mutate(white_rate = white_prison_pop / white_pop_15to64, black_rate = black_prison_pop / black_pop_15to64, black_versus_white = black_rate / white_rate) %>%
filter(state == "WA", !is.na(white_prison_pop), !is.na(black_prison_pop), !is.na(white_pop_15to64), !is.na(black_pop_15to64))
# print(black_white_rates)
## Make a nice plot of these figures
black_white_plot <- ggplot(black_white_rates) +
geom_point(mapping = aes(x = white_rate, y = black_rate)) +
geom_abline(slope = 1, intercept = 0) +
labs(title = "Black vs. White Incarceration Rates in Washington Counties", x = "White Incarceration Rate", y = "Black Incarceration Rate")
# print(black_white_plot)
## find the most extreme counties:
most_extreme <- black_white_rates %>%
arrange(-black_versus_white) %>%
head(1)
# print(most_extreme)
# Skagit countyin 1991 has the most extreme black versus white incarceration rate with 23.5
## ---------- maps----------
## load the county shapefile and join on county fips
county_shapes <- map_data("county") %>%
# load county boundary data (package "maps")
unite(polyname, region, subregion, sep = ",") %>%
# put the polygon name in the same form as in county.fips
left_join(county.fips, by = "polyname")
# merge with fips data
## now you have dataset `county_shapes` that contains the boudaries
## and the corresponding fipts codes.  You can directly merge it with
## the incarceration data using fips codes.
## select year 2016
data_2016 <- black_white_rates  %>%
select(year, county_name, fips, state, black_versus_white) %>%
group_by(county_name) %>%
filter(year == "2016")
# print(data_2016)
## Join map data to the data
joined_data <- left_join(data_2016, county_shapes, by = "fips")
## Make a nice map
## use "+ coord_quickmap()" to make the map look not distorted
map_WA <- ggplot(joined_data, aes(x = long, y = lat)) +
geom_polygon(aes(fill = black_versus_white), color = "black") +
scale_fill_gradient2(low ="blue", mid = "white", high = "red", midpoint = 1) +
coord_quickmap()
# print(map_WA)
joined_data <- left_join(data_2016, county_shapes, by = "fips")
View(map_WA)
print(map_WA)
setwd("C:/Users/justi/Desktop/INFO201/final-info201/final")
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(maps)
library(tidyverse)
country_vaccinations <- read.csv("../data/country_vaccinations.csv")
country_by_manufacturer <- read.csv("../data/country_vaccinations_by_manufacturer.csv")
county_statistics <- read.csv("../data/county_statistics.csv")
trump_biden <- read.csv("../data/trump_biden_polls.csv")
trump_clinton <- read.csv("../data/trump_clinton_polls.csv")
vaccine_hesitancy <- read.csv("../data/Vaccine_Hesitancy_County.csv")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
## load the county shapefile and join on county fips
county_shapes <- map_data("county") %>%
# load county boundary data (package "maps")
unite(polyname, region, subregion, sep = ",") %>%
# put the polygon name in the same form as in county.fips
left_join(county.fips, by = "polyname")
# merge with fips data
map_hesitancy <- left_join(vaccine_hesitancy, county_shapes, by = c("FIPS.Code" = "fips"))
output$mapPlot <- renderPlot({
map <- ggplot(map_hesitancy, aes(x = long, y = lat)) +
geom_polygon(aes(fill = Percent.Hispanic), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0.5) +
coord_quickmap()
})
})
map <- ggplot(map_hesitancy, aes(x = long, y = lat)) +
geom_polygon(aes(fill = Percent.Hispanic), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0.5) +
coord_quickmap()
map_hesitancy <- left_join(vaccine_hesitancy, county_shapes, by = c("FIPS.Code" = "fips"))
output$mapPlot <- renderPlot({
county_shapes <- map_data("county") %>%
# load county boundary data (package "maps")
unite(polyname, region, subregion, sep = ",") %>%
# put the polygon name in the same form as in county.fips
left_join(county.fips, by = "polyname")
# merge with fips data
map_hesitancy <- left_join(vaccine_hesitancy, county_shapes, by = c("FIPS.Code" = "fips"))
output$mapPlot <- renderPlot({
map <- ggplot(map_hesitancy, aes(x = long, y = lat)) +
geom_polygon(aes(fill = Percent.Hispanic), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0.5) +
coord_quickmap()
})
print(output$mapPlot)
print(output$mapPlot)
runApp()
runApp()
runApp()
runApp()
